name: Terraform Azure VM Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to perform (apply or destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  TF_VERSION: 1.7.5
  TF_WORKING_DIR: VM

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} init \
            -backend-config="resource_group_name=devsecops-cloud_group" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Format Check
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} fmt -check -recursive

      - name: Terraform Validate
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

      - name: Terraform Plan
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} plan \
            -var-file="azure.tfvars" \
            -var "client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" \
            -var "client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" \
            -var "tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" \
            -var "subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" \
            -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' && github.ref == 'refs/heads/main' }}
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} apply -var-file="azure.tfvars" -auto-approve \
            -var "client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" \
            -var "client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" \
            -var "tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" \
            -var "subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" \
            -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} destroy -var-file="azure.tfvars" -auto-approve \
            -var "client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" \
            -var "client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" \
            -var "tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" \
            -var "subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" \
            -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
